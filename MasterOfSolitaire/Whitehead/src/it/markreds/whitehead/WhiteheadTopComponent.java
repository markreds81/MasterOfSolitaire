/*
 * Implementazione del gioco solitario Whitehead.
 * Progetto realizzato da Marco Rossi <marco@markreds.it> per l'esame finale
 * del corso "Algoritmi e Strutture di dati" della prof.ssa Elena Lodi, c.d.l.
 * in Informatica, a.a. 2011/2012, Dipartimento di S.M.F.N. dell'Universit√† di
 * Siena.
 * 
 * Modulo: WhiteheadTopComponent.java
 * 
 * Creato il: 18-08-2012
 * 
 * Finestra principale del modulo. Contiene al suo interno un JPanel di tipo
 * WhiteheadSolitaire.
 */
package it.markreds.whitehead;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.UndoRedo;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//it.markreds.whitehead//Whitehead//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "WhiteheadTopComponent",
iconBase = "it/markreds/whitehead/kpat.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "it.markreds.whitehead.WhiteheadTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_WhiteheadAction",
preferredID = "WhiteheadTopComponent")
@Messages({
    "CTL_WhiteheadAction=Whitehead",
    "CTL_WhiteheadTopComponent=Whitehead",
    "HINT_WhiteheadTopComponent=This is a Whitehead window"
})
public final class WhiteheadTopComponent extends TopComponent implements UndoRedo.Provider {
    private final UndoRedo.Manager manager = new UndoRedo.Manager();
    private WhiteheadSolitaire solitaire;
    
    public WhiteheadTopComponent() {
        initComponents();
        setName(Bundle.CTL_WhiteheadTopComponent());
        setToolTipText(Bundle.HINT_WhiteheadTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        getActionMap().put("NewAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                solitaire.newGame();
            }
        });
        solitaire = (WhiteheadSolitaire) viewer;
        manager.setLimit(5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewer = new WhiteheadSolitaire();

        javax.swing.GroupLayout viewerLayout = new javax.swing.GroupLayout(viewer);
        viewer.setLayout(viewerLayout);
        viewerLayout.setHorizontalGroup(
            viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        viewerLayout.setVerticalGroup(
            viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel viewer;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        solitaire.getUndoSupport().addUndoableEditListener(manager);
    }

    @Override
    public void componentClosed() {
        solitaire.getUndoSupport().removeUndoableEditListener(manager);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    @Override
    public UndoRedo getUndoRedo() {
        return manager;
    }
}
